func (box *Boxs) write(f chan bool) {
	for {
		r := rand.New(rand.NewSource(55))
		ir := IntRange{0, 30}
		m.Lock()
		bx := append(Boxs{}, *box...)
		dt := (time.Now().Local().Unix()) + int64(ir.NextRandom(r))
		unixTimeUTC := time.Unix(dt, 0)
		unitTimeInRFC3339 := unixTimeUTC.Format(time.RFC3339)
		fmc.Printfln("#rbt write> #gbtdate: #ybt%s", unitTimeInRFC3339)
		bx = append(bx, Box{Time: dt})
		*box = bx
		m.Unlock()
		time.Sleep(time.Duration(5) * time.Second)
	}
}
	//
	//go
	//	r := chi.NewRouter()
	//r.Use(middleware.Logger)
	//	Upd := Update{

	//		UpdateToken: Updatetoken,
	//	}
	//	r.Get("/edit", Upd.edit)
	//curl "http://localhost:3000/edit?token=713753713:AAHvUVHW9MLQ1OVdXzumghRXOj_lShalCfQ"
	//curl "http://localhost:3000/edit?token=697389856:AAFxgMjR6yMMjHek1KfNaXrikRYNkZmuJww"
	//	fmt.Println("listen:3000")
	//	go http.ListenAndServe(":3000", r)



	func (Update Update) edit(w http.ResponseWriter, r *http.Request) {
	token = r.FormValue("token")
	//fmt.Printf("%s %s %s\n", yellow("edit>"), b("token>"), g(token))
	w.Write([]byte(token))
	go func() {
		Update.UpdateToken <- token

	}()

}